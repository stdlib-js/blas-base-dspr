{"version":3,"file":"index.mjs","sources":["../lib/base.js","../lib/dspr.js","../lib/main.js","../lib/ndarray.js","../lib/index.js","../16d7d08bfdc0dbf4caafb1a206d43b"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @private\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} AP - packed form of a symmetric matrix `A`\n* @param {integer} strideAP - `AP` stride length\n* @param {NonNegativeInteger} offsetAP - starting index for `AP`\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 1.0, 2.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dspr( 'row-major', 'upper', 3, 1.0, x, 1, 0, AP, 1, 0 );\n* // AP => <Float64Array>[ 2.0, 4.0, 6.0, 5.0, 8.0, 10.0 ]\n*/\nfunction dspr( order, uplo, N, alpha, x, strideX, offsetX, AP, strideAP, offsetAP ) { // eslint-disable-line max-len\n\tvar tmp;\n\tvar ix0;\n\tvar ix1;\n\tvar iap;\n\tvar i0;\n\tvar i1;\n\tvar kk;\n\tvar ox;\n\n\tox = offsetX;\n\tkk = offsetAP;\n\tif (\n\t\t( order === 'column-major' && uplo === 'upper' ) ||\n\t\t( order === 'row-major' && uplo === 'lower' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = alpha * x[ ix1 ];\n\t\t\t\tix0 = ox;\n\t\t\t\tiap = kk;\n\t\t\t\tfor ( i0 = 0; i0 <= i1; i0++ ) {\n\t\t\t\t\tAP[ iap ] += x[ ix0 ] * tmp;\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t\tiap += strideAP;\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t\tkk += ( i1 + 1 ) * strideAP;\n\t\t}\n\t\treturn AP;\n\t}\n\t// ( order === 'column-major' && uplo === 'lower' ) || ( order === 'row-major' && uplo === 'upper' )\n\tix1 = ox;\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\ttmp = alpha * x[ ix1 ];\n\t\t\tix0 = ix1;\n\t\t\tiap = kk;\n\t\t\tfor ( i0 = 0; i0 < N - i1; i0++ ) {\n\t\t\t\tAP[ iap ] += x[ ix0 ] * tmp;\n\t\t\t\tix0 += strideX;\n\t\t\t\tiap += strideAP;\n\t\t\t}\n\t\t}\n\t\tix1 += strideX;\n\t\tkk += ( N - i1 ) * strideAP;\n\t}\n\treturn AP;\n}\n\n\n// EXPORTS //\n\nexport default dspr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLayout from '@stdlib/blas-base-assert-is-layout';\nimport isMatrixTriangle from '@stdlib/blas-base-assert-is-matrix-triangle';\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} AP - packed form of a symmetric matrix `A`\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether the lower or upper triangular matrix is supplied\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 1.0, 2.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dspr( 'row-major', 'upper', 3, 1.0, x, 1, AP );\n* // AP => <Float64Array>[ 2.0, 4.0, 6.0, 5.0, 8.0, 10.0 ]\n*/\nfunction dspr( order, uplo, N, alpha, x, strideX, AP ) {\n\tvar ox;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn AP;\n\t}\n\tox = stride2offset( N, strideX );\n\treturn base( order, uplo, N, alpha, x, strideX, ox, AP, 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default dspr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dspr from './dspr.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dspr, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dspr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLayout from '@stdlib/blas-base-assert-is-layout';\nimport isMatrixTriangle from '@stdlib/blas-base-assert-is-matrix-triangle';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} AP - packed form of a symmetric matrix `A`\n* @param {integer} strideAP - `AP` stride length\n* @param {NonNegativeInteger} offsetAP - starting index for `AP`\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether the lower or upper triangular matrix is supplied\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @throws {RangeError} ninth argument must be non-zero\n* @returns {Float64Array} `A`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 1.0, 2.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dspr( 'row-major', 'upper', 3, 1.0, x, 1, 0, AP, 1, 0 );\n* // AP => <Float64Array>[ 2.0, 4.0, 6.0, 5.0, 8.0, 10.0 ]\n*/\nfunction dspr( order, uplo, N, alpha, x, strideX, offsetX, AP, strideAP, offsetAP ) { // eslint-disable-line max-len\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideAP === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Ninth argument must be non-zero. Value: `%d`.', strideAP ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn AP;\n\t}\n\treturn base( order, uplo, N, alpha, x, strideX, offsetX, AP, strideAP, offsetAP ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dspr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the symmetric rank 1 operation `A = α*x*x^T + A` where `α` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @module @stdlib/blas-base-dspr\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import dspr from '@stdlib/blas-base-dspr';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 1.0, 2.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dspr( 'row-major', 'upper', 3, 1.0, x, 1, AP );\n* // AP => <Float64Array>[ 2.0, 4.0, 6.0, 5.0, 8.0, 10.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import dspr from '@stdlib/blas-base-dspr';\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 1.0, 2.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dspr.ndarray( 'row-major', 'upper', 3, 1.0, x, 1, 0, AP, 1, 0 );\n* // AP => <Float64Array>[ 2.0, 4.0, 6.0, 5.0, 8.0, 10.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils-try-require';\nimport isError from '@stdlib/assert-is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dspr;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdspr = main;\n} else {\n\tdspr = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dspr;\n\n// exports: { \"ndarray\": \"dspr.ndarray\" }\n","export default '/home/runner/work/blas-base-dspr/blas-base-dspr/lib'"],"names":["dspr","order","uplo","N","alpha","x","strideX","offsetX","AP","strideAP","offsetAP","tmp","ix0","ix1","iap","i0","i1","kk","ox","isLayout","TypeError","format","isMatrixTriangle","RangeError","base","stride2offset","setReadOnly","tryRequire","join","require$$0","dspr$1","isError","main"],"mappings":";;2pGA+CA,SAASA,EAAMC,EAAOC,EAAMC,EAAGC,EAAOC,EAAGC,EAASC,EAASC,EAAIC,EAAUC,GACxE,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAIJ,GAFAA,EAAKX,EACLU,EAAKP,EAEQ,iBAAVT,GAAqC,UAATC,GAClB,cAAVD,GAAkC,UAATC,EAC1B,CAED,IADAW,EAAMK,EACAF,EAAK,EAAGA,EAAKb,EAAGa,IAAO,CAC5B,GAAkB,IAAbX,EAAGQ,GAIP,IAHAF,EAAMP,EAAQC,EAAGQ,GACjBD,EAAMM,EACNJ,EAAMG,EACAF,EAAK,EAAGA,GAAMC,EAAID,IACvBP,EAAIM,IAAST,EAAGO,GAAQD,EACxBC,GAAON,EACPQ,GAAOL,EAGTI,GAAOP,EACPW,IAAQD,EAAK,GAAMP,CACnB,CACD,OAAOD,CACP,CAGD,IADAK,EAAMK,EACAF,EAAK,EAAGA,EAAKb,EAAGa,IAAO,CAC5B,GAAkB,IAAbX,EAAGQ,GAIP,IAHAF,EAAMP,EAAQC,EAAGQ,GACjBD,EAAMC,EACNC,EAAMG,EACAF,EAAK,EAAGA,EAAKZ,EAAIa,EAAID,IAC1BP,EAAIM,IAAST,EAAGO,GAAQD,EACxBC,GAAON,EACPQ,GAAOL,EAGTI,GAAOP,EACPW,IAAQd,EAAIa,GAAOP,CACnB,CACD,OAAOD,CACR,CCzCA,SAASR,EAAMC,EAAOC,EAAMC,EAAGC,EAAOC,EAAGC,EAASE,GAGjD,IAAMW,EAAUlB,GACf,MAAM,IAAImB,UAAWC,EAAQ,uEAAwEpB,IAEtG,IAAMqB,EAAkBpB,GACvB,MAAM,IAAIkB,UAAWC,EAAQ,wHAAyHnB,IAEvJ,GAAKC,EAAI,EACR,MAAM,IAAIoB,WAAYF,EAAQ,+EAAgFlB,IAE/G,GAAiB,IAAZG,EACJ,MAAM,IAAIiB,WAAYF,EAAQ,kEAAmEf,IAElG,OAAW,IAANH,GAAqB,IAAVC,EACRI,EAGDgB,EAAMvB,EAAOC,EAAMC,EAAGC,EAAOC,EAAGC,EADlCmB,EAAetB,EAAGG,GAC6BE,EAAI,EAAG,EAC5D,CC/CAkB,EAAA1B,EAAA,WC8BA,SAAeC,EAAOC,EAAMC,EAAGC,EAAOC,EAAGC,EAASC,EAASC,EAAIC,EAAUC,GACxE,IAAMS,EAAUlB,GACf,MAAM,IAAImB,UAAWC,EAAQ,uEAAwEpB,IAEtG,IAAMqB,EAAkBpB,GACvB,MAAM,IAAIkB,UAAWC,EAAQ,wHAAyHnB,IAEvJ,GAAKC,EAAI,EACR,MAAM,IAAIoB,WAAYF,EAAQ,+EAAgFlB,IAE/G,GAAiB,IAAZG,EACJ,MAAM,IAAIiB,WAAYF,EAAQ,kEAAmEf,IAElG,GAAkB,IAAbG,EACJ,MAAM,IAAIc,WAAYF,EAAQ,kEAAmEZ,IAElG,OAAW,IAANN,GAAqB,IAAVC,EACRI,EAEDgB,EAAMvB,EAAOC,EAAMC,EAAGC,EAAOC,EAAGC,EAASC,EAASC,EAAIC,EAAUC,EACxE,IC/BA,IAQAV,EACAW,EAAAgB,GAAAC,EATAC,EAAAD,MChDe,sDDyDf,gBAUAE,EARA9B,EADA+B,EAAApB,GACAqB,EAEArB"}