{
  "version": 3,
  "sources": ["../lib/base.js", "../lib/dspr.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = \u03B1*x*x^T + A` where `\u03B1` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @private\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} AP - packed form of a symmetric matrix `A`\n* @param {integer} strideAP - `AP` stride length\n* @param {NonNegativeInteger} offsetAP - starting index for `AP`\n* @returns {Float64Array} `A`\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 1.0, 2.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dspr( 'row-major', 'upper', 3, 1.0, x, 1, 0, AP, 1, 0 );\n* // AP => <Float64Array>[ 2.0, 4.0, 6.0, 5.0, 8.0, 10.0 ]\n*/\nfunction dspr( order, uplo, N, alpha, x, strideX, offsetX, AP, strideAP, offsetAP ) { // eslint-disable-line max-len\n\tvar tmp;\n\tvar ix0;\n\tvar ix1;\n\tvar iap;\n\tvar i0;\n\tvar i1;\n\tvar kk;\n\tvar ox;\n\n\tox = offsetX;\n\tkk = offsetAP;\n\tif (\n\t\t( order === 'column-major' && uplo === 'upper' ) ||\n\t\t( order === 'row-major' && uplo === 'lower' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = alpha * x[ ix1 ];\n\t\t\t\tix0 = ox;\n\t\t\t\tiap = kk;\n\t\t\t\tfor ( i0 = 0; i0 <= i1; i0++ ) {\n\t\t\t\t\tAP[ iap ] += x[ ix0 ] * tmp;\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t\tiap += strideAP;\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t\tkk += ( i1 + 1 ) * strideAP;\n\t\t}\n\t\treturn AP;\n\t}\n\t// ( order === 'column-major' && uplo === 'lower' ) || ( order === 'row-major' && uplo === 'upper' )\n\tix1 = ox;\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\ttmp = alpha * x[ ix1 ];\n\t\t\tix0 = ix1;\n\t\t\tiap = kk;\n\t\t\tfor ( i0 = 0; i0 < N - i1; i0++ ) {\n\t\t\t\tAP[ iap ] += x[ ix0 ] * tmp;\n\t\t\t\tix0 += strideX;\n\t\t\t\tiap += strideAP;\n\t\t\t}\n\t\t}\n\t\tix1 += strideX;\n\t\tkk += ( N - i1 ) * strideAP;\n\t}\n\treturn AP;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dspr;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLayout = require( '@stdlib/blas-base-assert-is-layout' );\nvar isMatrixTriangle = require( '@stdlib/blas-base-assert-is-matrix-triangle' );\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar format = require( '@stdlib/string-format' );\nvar base = require( './base.js' );\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = \u03B1*x*x^T + A` where `\u03B1` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} AP - packed form of a symmetric matrix `A`\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether the lower or upper triangular matrix is supplied\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @returns {Float64Array} `A`\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 1.0, 2.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dspr( 'row-major', 'upper', 3, 1.0, x, 1, AP );\n* // AP => <Float64Array>[ 2.0, 4.0, 6.0, 5.0, 8.0, 10.0 ]\n*/\nfunction dspr( order, uplo, N, alpha, x, strideX, AP ) {\n\tvar ox;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn AP;\n\t}\n\tox = stride2offset( N, strideX );\n\treturn base( order, uplo, N, alpha, x, strideX, ox, AP, 1, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dspr;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLayout = require( '@stdlib/blas-base-assert-is-layout' );\nvar isMatrixTriangle = require( '@stdlib/blas-base-assert-is-matrix-triangle' );\nvar format = require( '@stdlib/string-format' );\nvar base = require( './base.js' );\n\n\n// MAIN //\n\n/**\n* Performs the symmetric rank 1 operation `A = \u03B1*x*x^T + A` where `\u03B1` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {number} alpha - scalar\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} AP - packed form of a symmetric matrix `A`\n* @param {integer} strideAP - `AP` stride length\n* @param {NonNegativeInteger} offsetAP - starting index for `AP`\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether the lower or upper triangular matrix is supplied\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @throws {RangeError} ninth argument must be non-zero\n* @returns {Float64Array} `A`\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 1.0, 2.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dspr( 'row-major', 'upper', 3, 1.0, x, 1, 0, AP, 1, 0 );\n* // AP => <Float64Array>[ 2.0, 4.0, 6.0, 5.0, 8.0, 10.0 ]\n*/\nfunction dspr( order, uplo, N, alpha, x, strideX, offsetX, AP, strideAP, offsetAP ) { // eslint-disable-line max-len\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideAP === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Ninth argument must be non-zero. Value: `%d`.', strideAP ) );\n\t}\n\tif ( N === 0 || alpha === 0.0 ) {\n\t\treturn AP;\n\t}\n\treturn base( order, uplo, N, alpha, x, strideX, offsetX, AP, strideAP, offsetAP ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = dspr;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar dspr = require( './dspr.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dspr, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dspr;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform the symmetric rank 1 operation `A = \u03B1*x*x^T + A` where `\u03B1` is a scalar, `x` is an `N` element vector, and `A` is an `N` by `N` symmetric matrix supplied in packed form.\n*\n* @module @stdlib/blas-base-dspr\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dspr = require( '@stdlib/blas-base-dspr' );\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 1.0, 2.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dspr( 'row-major', 'upper', 3, 1.0, x, 1, AP );\n* // AP => <Float64Array>[ 2.0, 4.0, 6.0, 5.0, 8.0, 10.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dspr = require( '@stdlib/blas-base-dspr' );\n*\n* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 1.0, 2.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dspr.ndarray( 'row-major', 'upper', 3, 1.0, x, 1, 0, AP, 1, 0 );\n* // AP => <Float64Array>[ 2.0, 4.0, 6.0, 5.0, 8.0, 10.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar dspr;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdspr = main;\n} else {\n\tdspr = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dspr;\n\n// exports: { \"ndarray\": \"dspr.ndarray\" }\n"],
  "mappings": "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",
  "names": ["require_base", "__commonJSMin", "exports", "module", "dspr", "order", "uplo", "N", "alpha", "x", "strideX", "offsetX", "AP", "strideAP", "offsetAP", "tmp", "ix0", "ix1", "iap", "i0", "i1", "kk", "ox", "require_dspr", "__commonJSMin", "exports", "module", "isLayout", "isMatrixTriangle", "stride2offset", "format", "base", "dspr", "order", "uplo", "N", "alpha", "x", "strideX", "AP", "ox", "require_ndarray", "__commonJSMin", "exports", "module", "isLayout", "isMatrixTriangle", "format", "base", "dspr", "order", "uplo", "N", "alpha", "x", "strideX", "offsetX", "AP", "strideAP", "offsetAP", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "dspr", "ndarray", "join", "tryRequire", "isError", "main", "dspr", "tmp"]
}
